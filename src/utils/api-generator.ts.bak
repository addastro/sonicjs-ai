import { Hono } from 'hono'
import { zValidator } from '@hono/zod-validator'
import { z } from 'zod'

type Bindings = {
  DB: D1Database
  KV: KVNamespace
}

export interface SchemaDefinition {
  name: string
  tableName: string
  schema: z.ZodSchema
  relationships?: {
    [key: string]: {
      type: 'hasMany' | 'belongsTo' | 'hasOne'
      target: string
      foreignKey?: string
    }
  }
}

export class APIGenerator {
  private app: Hono<{ Bindings: Bindings }>

  constructor() {
    this.app = new Hono<{ Bindings: Bindings }>()
  }

  generateCRUDRoutes(schema: SchemaDefinition): Hono<{ Bindings: Bindings }> {
    const routes = new Hono<{ Bindings: Bindings }>()
    const { name, tableName, schema: zodSchema } = schema

    // GET /{resource} - List all items
    routes.get(`/${name}`, async (c) => {
      try {
        const db = c.env.DB
        const { searchParams } = new URL(c.req.url)
        
        let query = `SELECT * FROM ${tableName}`
        const params: any[] = []
        
        // Add basic filtering
        const where: string[] = []
        const limit = Math.min(parseInt(searchParams.get('limit') || '50'), 100)
        const offset = parseInt(searchParams.get('offset') || '0')
        
        // Add status filter if exists
        if (searchParams.get('status')) {
          where.push('status = ?')
          params.push(searchParams.get('status'))
        }
        
        // Add search filter
        if (searchParams.get('search')) {
          where.push('(title LIKE ? OR data LIKE ?)')
          const searchTerm = `%${searchParams.get('search')}%`
          params.push(searchTerm, searchTerm)
        }
        
        if (where.length > 0) {
          query += ` WHERE ${where.join(' AND ')}`
        }
        
        query += ` ORDER BY createdAt DESC LIMIT ${limit} OFFSET ${offset}`
        
        const stmt = db.prepare(query)
        const { results } = await stmt.bind(...params).all()
        
        // Parse JSON data field for each result
        const parsedResults = results.map((row: any) => ({
          ...row,
          data: row.data ? JSON.parse(row.data) : {}
        }))
        
        return c.json({
          data: parsedResults,
          meta: {
            count: results.length,
            limit,
            offset,
            timestamp: new Date().toISOString()
          }
        })
      } catch (error) {
        console.error(`Error fetching ${name}:`, error)
        return c.json({ error: `Failed to fetch ${name}` }, 500)
      }
    })

    // GET /{resource}/{id} - Get single item
    routes.get(`/${name}/:id`, async (c) => {
      try {
        const id = c.req.param('id')
        const db = c.env.DB
        
        const stmt = db.prepare(`SELECT * FROM ${tableName} WHERE id = ?`)
        const result = await stmt.bind(id).first()
        
        if (!result) {
          return c.json({ error: `${name} not found` }, 404)
        }
        
        // Parse JSON data field
        const parsedResult = {
          ...result,
          data: result.data ? JSON.parse(result.data) : {}
        }
        
        return c.json({ data: parsedResult })
      } catch (error) {
        console.error(`Error fetching ${name}:`, error)
        return c.json({ error: `Failed to fetch ${name}` }, 500)
      }
    })

    // POST /{resource} - Create new item
    routes.post(`/${name}`,
      zValidator('json', zodSchema),
      async (c) => {
        try {
          const validatedData = c.req.valid('json')
          const db = c.env.DB
          
          const id = crypto.randomUUID()
          const now = new Date()
          
          // Extract core fields from validated data
          const { title, slug, status = 'draft', ...data } = validatedData as any
          
          const stmt = db.prepare(`
            INSERT INTO ${tableName} (id, title, slug, data, status, createdAt, updatedAt)
            VALUES (?, ?, ?, ?, ?, ?, ?)
          `)
          
          await stmt.bind(
            id,
            title || 'Untitled',
            slug || (title ? title.toLowerCase().replace(/\s+/g, '-') : 'untitled'),
            JSON.stringify(data || {}),
            status || 'draft',
            now.getTime(),
            now.getTime()
          ).run()
          
          return c.json({
            data: {
              id,
              title: title || 'Untitled',
              slug: slug || (title ? title.toLowerCase().replace(/\s+/g, '-') : 'untitled'),
              data,
              status: status || 'draft',
              createdAt: now.toISOString()
            }
          }, 201)
        } catch (error) {
          console.error(`Error creating ${name}:`, error)
          return c.json({ error: `Failed to create ${name}` }, 500)
        }
      }
    )

    // PUT /{resource}/{id} - Update item
    routes.put(`/${name}/:id`,
      zValidator('json', (zodSchema as any).partial()),
      async (c) => {
        try {
          const id = c.req.param('id')
          const validatedData = c.req.valid('json')
          const db = c.env.DB
          
          // Check if item exists
          const existingStmt = db.prepare(`SELECT * FROM ${tableName} WHERE id = ?`)
          const existing = await existingStmt.bind(id).first()
          
          if (!existing) {
            return c.json({ error: `${name} not found` }, 404)
          }
          
          const now = new Date()
          const { title, slug, status, ...data } = validatedData as any
          
          // Merge with existing data
          const existingData = existing.data ? JSON.parse(existing.data) : {}
          const mergedData = { ...existingData, ...data }
          
          const stmt = db.prepare(`
            UPDATE ${tableName} 
            SET title = COALESCE(?, title),
                slug = COALESCE(?, slug),
                data = ?,
                status = COALESCE(?, status),
                updatedAt = ?
            WHERE id = ?
          `)
          
          await stmt.bind(
            title || null,
            slug || null,
            JSON.stringify(mergedData),
            status || null,
            now.getTime(),
            id
          ).run()
          
          return c.json({
            data: {
              id,
              title: title || existing.title,
              slug: slug || existing.slug,
              data: mergedData,
              status: status || existing.status,
              updatedAt: now.toISOString()
            }
          })
        } catch (error) {
          console.error(`Error updating ${name}:`, error)
          return c.json({ error: `Failed to update ${name}` }, 500)
        }
      }
    )

    // DELETE /{resource}/{id} - Delete item
    routes.delete(`/${name}/:id`, async (c) => {
      try {
        const id = c.req.param('id')
        const db = c.env.DB
        
        // Check if item exists
        const existingStmt = db.prepare(`SELECT * FROM ${tableName} WHERE id = ?`)
        const existing = await existingStmt.bind(id).first()
        
        if (!existing) {
          return c.json({ error: `${name} not found` }, 404)
        }
        
        const stmt = db.prepare(`DELETE FROM ${tableName} WHERE id = ?`)
        await stmt.bind(id).run()
        
        return c.json({ message: `${name} deleted successfully` })
      } catch (error) {
        console.error(`Error deleting ${name}:`, error)
        return c.json({ error: `Failed to delete ${name}` }, 500)
      }
    })

    return routes
  }

  getApp(): Hono<{ Bindings: Bindings }> {
    return this.app
  }

  registerSchema(schema: SchemaDefinition): void {
    const routes = this.generateCRUDRoutes(schema)
    this.app.route('/', routes)
  }
}